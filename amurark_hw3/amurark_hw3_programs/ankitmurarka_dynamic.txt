
class MatrixChainDynamic {
	long startTime;
	long finishTime;
	public MatrixChainDynamic()
	{
		this.startTime = 0;
		this.finishTime = 0;
	}
	public Result getResult(int[] p) {
		this.startTime = System.nanoTime();
		int n = p.length - 1;
		long[][] m = new long[n][n];
		long[][] s = new long[n][n];
		for(int i = 0; i < n; i++) {
			m[i][i] = 0;
		}
		for(int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if(i <= j)
				{
					m[i][j] = 0;
				}
			}
		}
		for(int i = n-2; i >= 0; i--) {
			for (int j = i+1; j<n; j++)
			{
				long min = 10000000;
				int kVal = 0;
				for (int k = i; k <= j-1; k++)
				{
					long sum = m[i][k]+m[k+1][j]+(p[i]*p[k+1]*p[j+1]);
					if(min > sum)
					{
						min = sum;
						kVal = k;
					}
				}
				m[i][j] = min;
				s[i][j] = kVal;
			}
		}
		this.finishTime = System.nanoTime();
		return new Result(m, s);
	}
	
	public long getTotalTimeTaken()
	{
		return this.finishTime - this.startTime;
	}
}


