
public class MatMult {
	public static void main(String[] args)
	{
		//ParenthesizeCount p1 = new ParenthesizeCount();
		//int sum = p1.p1(5,0);
		//int[] p1 = {30, 35, 15, 5};
		//int[] p1 = {45, 20, 65, 85, 10, 15, 95, 50};
		//int[] p1 = {10, 15, 20, 5, 20, 35, 50, 75, 80, 100, 105, 110};
		//int[] p1 = {50, 75, 15, 25, 30, 20, 45, 77, 13, 25, 47, 56, 65, 4, 20, 24};
		//int[] p1 = {5, 95, 15, 85, 25, 75, 235, 90, 111, 119, 105, 63, 91, 77, 45, 23, 31, 11};
		//int[] p1 = {5, 2, 4, 3, 7, 9, 7, 8, 6, 1, 3, 7, 6, 5};
		int[] p1 = {30, 35, 15, 5, 10, 20};
		
		MatrixChainDynamic m1 = new MatrixChainDynamic();
		Result a = m1.getResult(p1);
		long timeTaken = m1.getTotalTimeTaken();
		System.out.println("Matrix chain multiplication using Dynamic programming, total scalar multiplications: "+a.getM()[0][p1.length-2]);
		for(int i = 0; i < p1.length-1; i++) {
			for(int j = 0; j < p1.length-1; j++) {
				System.out.print(a.getS()[i][j]+"\t");
			}
			System.out.print("\n");
		}
		System.out.println("Matrix chain multiplication using Dynamic programming, total recurrences: 0");
		System.out.println("Matrix chain mulitplication using Dynamic programming, total time taken :"+timeTaken);
		System.out.println("-------------------------------------------------------------------------------------\n");
		
		
		
		MatrixChainRecursive m2 = new MatrixChainRecursive(p1);
		m2.getResult(p1, 0, p1.length-2);
		m2.showResult();
		
		
		
		MatrixChainMemoization m3 = new MatrixChainMemoization(p1);
		m3.MemoizedMatrixChain(p1);
		m3.showResult();
	}
}
